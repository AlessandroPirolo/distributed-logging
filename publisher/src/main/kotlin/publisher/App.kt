/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package publisher

//import android.content.Context
import org.eclipse.paho.client.mqttv3.*


class MqttPublisher() {

    private var client: MqttClient = MqttClient("tcp://127.0.0.1:1883", MqttClient.generateClientId())

    fun connect(broker: String) {

        try {
            client.connect()
            client.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {
                    println("conn Comple")
                    println("Connected to: $serverURI")

                }

                override fun connectionLost(cause: Throwable) {
                    println("The Connection was lost.")
                }

                @Throws(Exception::class)
                override fun messageArrived(topic: String, message: MqttMessage) {
                    println("Incoming message from $topic: $message")
                }

                override fun deliveryComplete(token: IMqttDeliveryToken) {

                }
            })

        } catch (e: MqttException) {
            println("ele")
            e.printStackTrace()
        }
    }

    fun isConnected() {
        println(client.isConnected)
    }

    fun publishMessage(msg: String, topic: String = client.clientId) {

        try {
            val message = MqttMessage()
            message.payload = msg.toByteArray()
            client.publish(topic, message.payload, 1, true)
            println("$msg published to $topic")
        } catch (e: MqttException) {
            println("Error Publishing to $topic: " + e.message)
            e.printStackTrace()
        }

    }

    fun subscribeTopic(topic: String, qos: Int = 1) {
            client.subscribe(topic, qos)

    }

    fun close() {
        client.apply {
            //unregisterResources()
            close()
            disconnect()
        }
    }


}

fun main() {
    MqttPublisher().connect("tcp://localhost:1883")
    MqttPublisher().isConnected()
    MqttPublisher().publishMessage("ciao", "ciao")
    MqttPublisher().close()
}

